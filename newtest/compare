#!/opt/local/bin/python
from __future__ import print_function
import sys
import csv
import subprocess
import glob
try:
    from colorama import init, Fore, Back, Style
    init()
    COLORS=True
except:
    COLORS=False

class Colored:
    def __init__(self, style):
        self.style = style
    def __enter__(self):
        if COLORS:
            print (self.style, end='')
        return self
    def __exit__(self, exc_type, exc_value, traceback):
        if COLORS:
            print (Fore.RESET+Back.RESET+Style.RESET_ALL, end='')

def debug(*args, **kwargs):
    if DEBUG:
        with Colored(Style.DIM):
            for arg in args:
                print (arg, end=' ')
            for key, value in kwargs.items():
                print (key, value, end=' ')
            print()

def error(*args, **kwargs):
    with Colored(Style.BRIGHT+Fore.RED):
        for arg in args:
            print (arg, end=' ')
        for key, value in kwargs.items():
            print (key, value, end=' ')
        print()

def message(*args, **kwargs):
    with Colored(Style.BRIGHT):
        for arg in args:
            print (arg, end=' ')
        for key, value in kwargs.items():
            print (key, value, end=' ')
        print()

def separator(*args, **kwargs):
    rows, columns = subprocess.check_output(['stty', 'size']).split()
    rows = int(rows)
    columns = int(columns)
    with Colored(Style.BRIGHT+Fore.GREEN):
        if len(args) > 1:
            str = ' '.join(*args)
        elif len(args) == 1:
            str = args[0]
        else:
            str = ''
        for key, value in kwargs.items():
            str += key + ' ' + value + ' '
        l = len(str)
        sl = (columns-l-2)/2
        print('='*sl, end=' ')
        print(str, end=' ')
        print('='*(columns-sl-l-2))

def compare(filename1, filename2):
        data1 = []
        data2 = []
        with open(filename1, 'rb') as csv1:
            f1 = csv.reader(csv1, delimiter=';', quotechar='"')
            for row in f1:
                if len(row):
                    data1.append(row)
        with open(filename2, 'rb') as csv2:
            f2 = csv.reader(csv2, delimiter=';', quotechar='"')
            for row in f2:
                if len(row):
                    data2.append(row)
        values = {'Passed': 0, 'Missed': 1, 'Answer': 2, 'Timeout': 3, 'Exception': 4}
        good = []
        bad = []
        notfound = []
        for ind1, row1 in enumerate(data1):
            if ind1 == 0 or len(row1) < 3:
                continue
            found = False
            for ind2, row2 in enumerate(data2):
                if ind2 == 0 or len(row2) < 3:
                    continue
                if row1[0] == row2[0] and row1[1] == row2[1]:
                    st1 = values[row1[-1]]
                    st2 = values[row2[-1]]
                    row1.insert(0, ind1-1)
                    row2.insert(0, ind1-1)
                    if st1 > st2:
                        row2.append('<-')
                        row2.append(row1[-1])
                        good.append(row2)
                    elif st1 < st2:
                        row1.append('->')
                        row1.append(row2[-1])
                        bad.append(row1)
                    found = True
                    break
            if not found:
                notfound.append(row1)
        if len(good) > 0:
            separator('Progress')
            for row in good:
                message(*row)
        if len(bad) > 0:
            separator('Regress')
            for row in bad:
                error(*row)
        separator('Total')
        message('Progress:', len(good))
        message('Regress:', len(bad))
        message('Not found:', len(notfound))
        message('Processed:', len(data1), '+', len(data2), 'results')

if __name__ == '__main__':
    if len(sys.argv) == 3:
        compare(sys.argv[1], sys.argv[2])
    elif len(sys.argv) == 1:
        files = []
        for f in glob.glob('*.csv'):
            if f.startswith('test_'):
                files.append(f)
        if len(files) > 1:
            message('Compare', files[0], 'and', files[-1])
            compare(files[0], files[1])
        else:
            message('Test files not found')
            error('Usage: compare <first file> <second file>')
    else:
        error('Usage: compare <first file> <second file>')

